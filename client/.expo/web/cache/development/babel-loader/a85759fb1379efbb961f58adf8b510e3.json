{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ngong\\\\Desktop\\\\Nhom4.thienlpph09538.Assignment\\\\chat-master\\\\client\\\\screens\\\\Person.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Spinner from 'react-native-loading-spinner-overlay';\nimport SERVER from \"../utils/Server\";\nimport Modal from 'react-native-modal';\nexport default function Person(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var _route$params = route.params,\n      name = _route$params.name,\n      account = _route$params.account,\n      avatar = _route$params.avatar,\n      time = _route$params.time,\n      password = _route$params.password;\n\n  var _useState = useState(name),\n      _useState2 = _slicedToArray(_useState, 2),\n      editName = _useState2[0],\n      setEditName = _useState2[1];\n\n  var _useState3 = useState(password),\n      _useState4 = _slicedToArray(_useState3, 2),\n      oldPassword = _useState4[0],\n      setOldPassword = _useState4[1];\n\n  var _useState5 = useState(password),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newPassword = _useState6[0],\n      setNewPassword = _useState6[1];\n\n  var _useState7 = useState(password),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmNewPassword = _useState8[0],\n      setConfirmNewPassword = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isLoading = _useState10[0],\n      setIsLoading = _useState10[1];\n\n  var _useState11 = useState(avatar),\n      _useState12 = _slicedToArray(_useState11, 2),\n      newAvatar = _useState12[0],\n      setNewAvatar = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isModalVisible = _useState14[0],\n      setModalVisible = _useState14[1];\n\n  function updateData() {\n    var url,\n        data,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime.async(function updateData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = _args.length > 0 && _args[0] !== undefined ? _args[0] : '';\n            data = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(url, {\n              method: 'PUT',\n              mode: 'cors',\n              cache: 'no-cache',\n              credentials: 'same-origin',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              redirect: 'follow',\n              referrerPolicy: 'no-referrer',\n              body: JSON.stringify(data)\n            }));\n\n          case 4:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.json());\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n\n  var edit = function edit() {\n    if (oldPassword !== password) {\n      Alert.alert('Current password is incorrect');\n      return;\n    }\n\n    if (newPassword !== confirmNewPassword) {\n      Alert.alert('Password is not match');\n      return;\n    }\n\n    if (newPassword === confirmNewPassword) {\n      setIsLoading(true);\n      updateData(SERVER + \"update\", {\n        account: account,\n        name: editName,\n        password: newPassword,\n        avatar: newAvatar\n      }).then(function (data) {\n        setIsLoading(false);\n\n        if (data.status === 'fail') {\n          Alert.alert('This account is Invalid');\n        } else {\n          navigation.navigate('SignIn');\n        }\n      });\n    }\n  };\n\n  var changeImage = function changeImage() {\n    var randomAvatar = Math.floor(Math.random() * 1000);\n    var randomSet = Math.floor(Math.random() * 4 + 1);\n    setNewAvatar(\"https://robohash.org/\" + randomAvatar + \"?set=set\" + randomSet);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, React.createElement(ImageBackground, {\n    source: require(\"../assets/person.jpg\"),\n    style: {\n      flex: 1,\n      justifyContent: 'space-around',\n      resizeMode: \"cover\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      marginTop: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, React.createElement(Spinner, {\n    visible: isLoading,\n    textContent: 'Loading...',\n    textStyle: {\n      color: '#FFF'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 3\n      },\n      shadowOpacity: 0.5,\n      shadowRadius: 5,\n      elevation: 10\n    },\n    onPress: changeImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: newAvatar\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  })), React.createElement(Text, {\n    style: styles.textName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, name), React.createElement(TextInput, {\n    style: styles.textForm,\n    placeholder: \"New name\",\n    onChangeText: function onChangeText(e) {\n      setEditName(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }), React.createElement(TextInput, {\n    secureTextEntry: true,\n    style: styles.textForm,\n    placeholder: \"New password\",\n    onChangeText: function onChangeText(e) {\n      setNewPassword(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), React.createElement(TextInput, {\n    secureTextEntry: true,\n    style: styles.textForm,\n    placeholder: \"Confirm new password\",\n    onChangeText: function onChangeText(e) {\n      setConfirmNewPassword(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }), React.createElement(Text, {\n    style: {\n      width: '90%',\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, \"If don't want to change password. Please blank new password and confirm new password\"), React.createElement(TouchableOpacity, {\n    style: styles.update,\n    onPress: toggleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 15,\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }, \"Update\")), React.createElement(Modal, {\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    animationIn: \"slideInUp\",\n    coverScreen: true,\n    animationInTiming: 2000,\n    backdropOpacity: 0.5,\n    onBackdropPress: function onBackdropPress() {\n      return setModalVisible(false);\n    },\n    onSwipeComplete: function onSwipeComplete() {\n      return setModalVisible(false);\n    },\n    onBackButtonPress: function onBackButtonPress() {\n      setModalVisible(false);\n    },\n    isVisible: isModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: styles.modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  }, React.createElement(TextInput, {\n    secureTextEntry: true,\n    style: styles.textForm,\n    placeholder: \"Old password\",\n    onChangeText: function onChangeText(e) {\n      setOldPassword(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 29\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.update,\n    onPress: edit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 15,\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 33\n    }\n  }, \"Confirm\")))))));\n}\nvar styles = StyleSheet.create({\n  update: {\n    backgroundColor: 'cyan',\n    textAlign: 'center',\n    borderRadius: 10,\n    marginTop: 20,\n    padding: 15,\n    width: '60%',\n    alignItems: 'center'\n  },\n  textForm: {\n    borderWidth: 1,\n    padding: 10,\n    borderColor: 'gray',\n    borderRadius: 10,\n    marginTop: 10,\n    color: 'black',\n    fontSize: 20,\n    backgroundColor: 'white',\n    width: '60%',\n    textAlign: 'center'\n  },\n  textName: {\n    fontSize: 20,\n    marginTop: 10,\n    marginBottom: 10\n  },\n  image: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'pink',\n    borderRadius: 50\n  },\n  modal: {\n    height: 200,\n    width: '80%',\n    backgroundColor: 'lightgreen',\n    borderRadius: 15,\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/ngong/Desktop/Nhom4.thienlpph09538.Assignment/chat-master/client/screens/Person.js"],"names":["React","useState","Spinner","SERVER","Modal","Person","route","navigation","params","name","account","avatar","time","password","editName","setEditName","oldPassword","setOldPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","isLoading","setIsLoading","newAvatar","setNewAvatar","isModalVisible","setModalVisible","updateData","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","toggleModal","edit","Alert","alert","then","status","navigate","changeImage","randomAvatar","Math","floor","random","randomSet","flex","require","justifyContent","resizeMode","alignItems","marginTop","color","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","uri","styles","image","textName","textForm","e","update","fontSize","fontWeight","modal","StyleSheet","create","backgroundColor","textAlign","borderRadius","padding","borderWidth","borderColor","marginBottom","flexDirection"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;;;AAEA,OAAOC,OAAP,MAAoB,sCAApB;AACA,OAAOC,MAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,eAAe,SAASC,MAAT,OAAuC;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAAA,sBACAD,KAAK,CAACE,MADN;AAAA,MAC1CC,IAD0C,iBAC1CA,IAD0C;AAAA,MACpCC,OADoC,iBACpCA,OADoC;AAAA,MAC3BC,MAD2B,iBAC3BA,MAD2B;AAAA,MACnBC,IADmB,iBACnBA,IADmB;AAAA,MACbC,QADa,iBACbA,QADa;;AAAA,kBAElBZ,QAAQ,CAACQ,IAAD,CAFU;AAAA;AAAA,MAE3CK,QAF2C;AAAA,MAEjCC,WAFiC;;AAAA,mBAGZd,QAAQ,CAACY,QAAD,CAHI;AAAA;AAAA,MAG3CG,WAH2C;AAAA,MAG9BC,cAH8B;;AAAA,mBAIZhB,QAAQ,CAACY,QAAD,CAJI;AAAA;AAAA,MAI3CK,WAJ2C;AAAA,MAI9BC,cAJ8B;;AAAA,mBAKElB,QAAQ,CAACY,QAAD,CALV;AAAA;AAAA,MAK3CO,kBAL2C;AAAA,MAKvBC,qBALuB;;AAAA,mBAMhBpB,QAAQ,CAAC,KAAD,CANQ;AAAA;AAAA,MAM3CqB,SAN2C;AAAA,MAMhCC,YANgC;;AAAA,oBAOhBtB,QAAQ,CAACU,MAAD,CAPQ;AAAA;AAAA,MAO3Ca,SAP2C;AAAA,MAOhCC,YAPgC;;AAAA,oBAQRxB,QAAQ,CAAC,KAAD,CARA;AAAA;AAAA,MAQ3CyB,cAR2C;AAAA,MAQ3BC,eAR2B;;AAUlD,WAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,YAAAA,GAA1B,2DAAgC,EAAhC;AAAoCC,YAAAA,IAApC,2DAA2C,EAA3C;AAAA;AAAA,6CAC2BC,KAAK,CAACF,GAAD,EAAM;AAC9BG,cAAAA,MAAM,EAAE,KADsB;AAE9BC,cAAAA,IAAI,EAAE,MAFwB;AAG9BC,cAAAA,KAAK,EAAE,UAHuB;AAI9BC,cAAAA,WAAW,EAAE,aAJiB;AAK9BC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eALqB;AAS9BC,cAAAA,QAAQ,EAAE,QAToB;AAU9BC,cAAAA,cAAc,EAAE,aAVc;AAW9BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AAXwB,aAAN,CADhC;;AAAA;AACUY,YAAAA,QADV;AAAA,6CAcWA,QAAQ,CAACC,IAAT,EAdX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBjB,IAAAA,eAAe,CAAC,CAACD,cAAF,CAAf;AAEH,GAHD;;AAKA,MAAMmB,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,QAAI7B,WAAW,KAAKH,QAApB,EAA8B;AAC1BiC,MAAAA,KAAK,CAACC,KAAN,CAAY,+BAAZ;AACA;AACH;;AACD,QAAI7B,WAAW,KAAKE,kBAApB,EAAwC;AACpC0B,MAAAA,KAAK,CAACC,KAAN,CAAY,uBAAZ;AACA;AACH;;AACD,QAAI7B,WAAW,KAAKE,kBAApB,EAAwC;AACpCG,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,MAAAA,UAAU,CAAIzB,MAAJ,aAAoB;AAAEO,QAAAA,OAAO,EAAPA,OAAF;AAAWD,QAAAA,IAAI,EAAEK,QAAjB;AAA2BD,QAAAA,QAAQ,EAAEK,WAArC;AAAkDP,QAAAA,MAAM,EAAEa;AAA1D,OAApB,CAAV,CACKwB,IADL,CACU,UAAAlB,IAAI,EAAI;AACVP,QAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,YAAIO,IAAI,CAACmB,MAAL,KAAgB,MAApB,EAA4B;AACxBH,UAAAA,KAAK,CAACC,KAAN,CAAY,yBAAZ;AACH,SAFD,MAEO;AACHxC,UAAAA,UAAU,CAAC2C,QAAX,CAAoB,QAApB;AACH;AACJ,OARL;AASH;AACJ,GArBD;;AAsBA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAnB;AACA,QAAIC,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoB,CAA/B,CAAhB;AACA9B,IAAAA,YAAY,2BAAyB2B,YAAzB,gBAAgDI,SAAhD,CAAZ;AAEH,GALD;;AAOA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AACI,IAAA,MAAM,EAAEC,OAAO,wBADnB;AAEI,IAAA,KAAK,EAAE;AACHD,MAAAA,IAAI,EAAE,CADH;AACME,MAAAA,cAAc,EAAE,cADtB;AAEHC,MAAAA,UAAU,EAAE;AAFT,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEH,MAAAA,IAAI,EAAE,CAAR;AAAWI,MAAAA,UAAU,EAAE,QAAvB;AAAiCF,MAAAA,cAAc,EAAE,YAAjD;AAA+DG,MAAAA,SAAS,EAAE;AAA1E,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAEI,IAAA,OAAO,EAAExC,SAFb;AAII,IAAA,WAAW,EAAE,YAJjB;AAMI,IAAA,SAAS,EAAE;AAAEyC,MAAAA,KAAK,EAAE;AAAT,KANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAUI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAE;AACHC,MAAAA,WAAW,EAAE,MADV;AAEHC,MAAAA,YAAY,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAFX;AAGHC,MAAAA,aAAa,EAAE,GAHZ;AAIHC,MAAAA,YAAY,EAAE,CAJX;AAKHC,MAAAA,SAAS,EAAE;AALR,KADX;AAQI,IAAA,OAAO,EAAEnB,WARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUI,oBAAC,KAAD;AACI,IAAA,MAAM,EAAE;AAAEoB,MAAAA,GAAG,EAAE/C;AAAP,KADZ;AAEI,IAAA,KAAK,EAAEgD,MAAM,CAACC,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CAVJ,EAyBI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BjE,IAA/B,CAzBJ,EA0BI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE+D,MAAM,CAACG,QADlB;AAEI,IAAA,WAAW,EAAC,UAFhB;AAII,IAAA,YAAY,EAAE,sBAACC,CAAD,EAAO;AACjB7D,MAAAA,WAAW,CAAC6D,CAAD,CAAX;AACH,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,EAkCI,oBAAC,SAAD;AACI,IAAA,eAAe,EAAE,IADrB;AAEI,IAAA,KAAK,EAAEJ,MAAM,CAACG,QAFlB;AAGI,IAAA,WAAW,EAAC,cAHhB;AAII,IAAA,YAAY,EAAE,sBAACC,CAAD,EAAO;AACjBzD,MAAAA,cAAc,CAACyD,CAAD,CAAd;AACH,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,EA0CI,oBAAC,SAAD;AACI,IAAA,eAAe,EAAE,IADrB;AAEI,IAAA,KAAK,EAAEJ,MAAM,CAACG,QAFlB;AAGI,IAAA,WAAW,EAAC,sBAHhB;AAKI,IAAA,YAAY,EAAE,sBAACC,CAAD,EAAO;AACjBvD,MAAAA,qBAAqB,CAACuD,CAAD,CAArB;AACH,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1CJ,EAoDI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEV,MAAAA,KAAK,EAAE,KAAT;AAAgBJ,MAAAA,SAAS,EAAE;AAA3B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FApDJ,EAwDI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAEU,MAAM,CAACK,MADlB;AAEI,IAAA,OAAO,EAAEjC,WAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEkC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,UAAU,EAAE;AAA5B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CAxDJ,EA8DI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE;AACHpB,MAAAA,cAAc,EAAE,QADb;AAEHE,MAAAA,UAAU,EAAE;AAFT,KADX;AAKI,IAAA,WAAW,EAAC,WALhB;AAMI,IAAA,WAAW,EAAE,IANjB;AAOI,IAAA,iBAAiB,EAAE,IAPvB;AAQI,IAAA,eAAe,EAAE,GARrB;AASI,IAAA,eAAe,EAAE;AAAA,aAAMlC,eAAe,CAAC,KAAD,CAArB;AAAA,KATrB;AAUI,IAAA,eAAe,EAAE;AAAA,aAAMA,eAAe,CAAC,KAAD,CAArB;AAAA,KAVrB;AAWI,IAAA,iBAAiB,EAAE,6BAAM;AACrBA,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH,KAbL;AAcI,IAAA,SAAS,EAAED,cAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE8C,MAAM,CAACQ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,eAAe,EAAE,IADrB;AAEI,IAAA,KAAK,EAAER,MAAM,CAACG,QAFlB;AAGI,IAAA,WAAW,EAAC,cAHhB;AAKI,IAAA,YAAY,EAAE,sBAACC,CAAD,EAAO;AACjB3D,MAAAA,cAAc,CAAC2D,CAAD,CAAd;AACH,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAUI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAEJ,MAAM,CAACK,MADlB;AAEI,IAAA,OAAO,EAAEhC,IAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEiC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,UAAU,EAAE;AAA5B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,CAVJ,CAfJ,CA9DJ,CANJ,CADJ,CADJ;AA2GH;AACD,IAAMP,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,MAAM,EACN;AACIM,IAAAA,eAAe,EAAE,MADrB;AAEIC,IAAAA,SAAS,EAAE,QAFf;AAGIC,IAAAA,YAAY,EAAE,EAHlB;AAIIvB,IAAAA,SAAS,EAAE,EAJf;AAKIwB,IAAAA,OAAO,EAAE,EALb;AAMIpB,IAAAA,KAAK,EAAE,KANX;AAOIL,IAAAA,UAAU,EAAE;AAPhB,GAF6B;AAW7Bc,EAAAA,QAAQ,EACR;AACIY,IAAAA,WAAW,EAAE,CADjB;AAEID,IAAAA,OAAO,EAAE,EAFb;AAGIE,IAAAA,WAAW,EAAE,MAHjB;AAIIH,IAAAA,YAAY,EAAE,EAJlB;AAKIvB,IAAAA,SAAS,EAAE,EALf;AAMIC,IAAAA,KAAK,EAAE,OANX;AAOIe,IAAAA,QAAQ,EAAE,EAPd;AAQIK,IAAAA,eAAe,EAAE,OARrB;AASIjB,IAAAA,KAAK,EAAE,KATX;AAUIkB,IAAAA,SAAS,EAAE;AAVf,GAZ6B;AAyB7BV,EAAAA,QAAQ,EACR;AACII,IAAAA,QAAQ,EAAE,EADd;AAEIhB,IAAAA,SAAS,EAAE,EAFf;AAGI2B,IAAAA,YAAY,EAAE;AAHlB,GA1B6B;AAgC7BhB,EAAAA,KAAK,EACL;AACIP,IAAAA,KAAK,EAAE,GADX;AAEIC,IAAAA,MAAM,EAAE,GAFZ;AAGIgB,IAAAA,eAAe,EAAE,MAHrB;AAIIE,IAAAA,YAAY,EAAE;AAJlB,GAjC6B;AAwC7BL,EAAAA,KAAK,EACL;AACIb,IAAAA,MAAM,EAAE,GADZ;AAEID,IAAAA,KAAK,EAAE,KAFX;AAGIiB,IAAAA,eAAe,EAAE,YAHrB;AAIIE,IAAAA,YAAY,EAAE,EAJlB;AAKI1B,IAAAA,cAAc,EAAE,QALpB;AAMI+B,IAAAA,aAAa,EAAE,QANnB;AAOI7B,IAAAA,UAAU,EAAE;AAPhB;AAzC6B,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { View, Text, TextInput, TouchableOpacity, Alert, Image, StyleSheet, ImageBackground } from 'react-native'\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\nimport SERVER from '../utils/Server';\r\nimport Modal from 'react-native-modal';\r\n\r\nexport default function Person({ route, navigation }) {\r\n    const { name, account, avatar, time, password } = route.params;\r\n    const [editName, setEditName] = useState(name);\r\n    const [oldPassword, setOldPassword] = useState(password);\r\n    const [newPassword, setNewPassword] = useState(password);\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(password);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [newAvatar, setNewAvatar] = useState(avatar)\r\n    const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n    async function updateData(url = '', data = {}) {\r\n        const response = await fetch(url, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(data)\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    const toggleModal = () => {\r\n        setModalVisible(!isModalVisible);\r\n\r\n    };\r\n\r\n    const edit = () => {\r\n        if (oldPassword !== password) {\r\n            Alert.alert('Current password is incorrect')\r\n            return\r\n        }\r\n        if (newPassword !== confirmNewPassword) {\r\n            Alert.alert('Password is not match')\r\n            return\r\n        }\r\n        if (newPassword === confirmNewPassword) {\r\n            setIsLoading(true)\r\n            updateData(`${SERVER}update`, { account, name: editName, password: newPassword, avatar: newAvatar })\r\n                .then(data => {\r\n                    setIsLoading(false)\r\n                    if (data.status === 'fail') {\r\n                        Alert.alert('This account is Invalid')\r\n                    } else {\r\n                        navigation.navigate('SignIn')\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    const changeImage = () => {\r\n        let randomAvatar = Math.floor(Math.random() * 1000);\r\n        let randomSet = Math.floor(Math.random() * 4 + 1)\r\n        setNewAvatar(`https://robohash.org/${randomAvatar}?set=set${randomSet}`)\r\n\r\n    }\r\n\r\n    return (\r\n        <View style={{ flex: 1 }}>\r\n            <ImageBackground\r\n                source={require('../assets/person.jpg')}\r\n                style={{\r\n                    flex: 1, justifyContent: 'space-around',\r\n                    resizeMode: \"cover\",\r\n                }}>\r\n                <View style={{ flex: 1, alignItems: 'center', justifyContent: 'flex-start', marginTop: 50 }}>\r\n                    <Spinner\r\n                        //visibility of Overlay Loading Spinner\r\n                        visible={isLoading}\r\n                        //Text with the Spinner\r\n                        textContent={'Loading...'}\r\n                        //Text style of the Spinner Text\r\n                        textStyle={{ color: '#FFF' }}\r\n                    />\r\n\r\n                    <TouchableOpacity\r\n                        style={{\r\n                            shadowColor: '#000',\r\n                            shadowOffset: { width: 0, height: 3 },\r\n                            shadowOpacity: 0.5,\r\n                            shadowRadius: 5,\r\n                            elevation: 10,\r\n                        }}\r\n                        onPress={changeImage}\r\n                    >\r\n                        <Image\r\n                            source={{ uri: newAvatar }}\r\n                            style={styles.image}\r\n                        />\r\n                    </TouchableOpacity>\r\n                    <Text style={styles.textName}>{name}</Text>\r\n                    <TextInput\r\n                        style={styles.textForm}\r\n                        placeholder=\"New name\"\r\n\r\n                        onChangeText={(e) => {\r\n                            setEditName(e)\r\n                        }}\r\n                    />\r\n                    <TextInput\r\n                        secureTextEntry={true}\r\n                        style={styles.textForm}\r\n                        placeholder=\"New password\"\r\n                        onChangeText={(e) => {\r\n                            setNewPassword(e)\r\n                        }}\r\n                    />\r\n                    <TextInput\r\n                        secureTextEntry={true}\r\n                        style={styles.textForm}\r\n                        placeholder=\"Confirm new password\"\r\n\r\n                        onChangeText={(e) => {\r\n                            setConfirmNewPassword(e)\r\n                        }}\r\n                    />\r\n\r\n                    <Text style={{ width: '90%', marginTop: 10 }}>If don't want to change password. Please blank new\r\n                    password and\r\n                    confirm new\r\n                        password</Text>\r\n                    <TouchableOpacity\r\n                        style={styles.update}\r\n                        onPress={toggleModal}\r\n                    >\r\n                        <Text style={{ fontSize: 15, fontWeight: 'bold' }}>Update</Text>\r\n                    </TouchableOpacity>\r\n                    <Modal\r\n                        style={{\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center'\r\n                        }}\r\n                        animationIn='slideInUp'\r\n                        coverScreen={true}\r\n                        animationInTiming={2000}\r\n                        backdropOpacity={0.5}\r\n                        onBackdropPress={() => setModalVisible(false)}\r\n                        onSwipeComplete={() => setModalVisible(false)}\r\n                        onBackButtonPress={() => {\r\n                            setModalVisible(false)\r\n                        }}\r\n                        isVisible={isModalVisible}>\r\n                        <View style={styles.modal}>\r\n                            <TextInput\r\n                                secureTextEntry={true}\r\n                                style={styles.textForm}\r\n                                placeholder=\"Old password\"\r\n\r\n                                onChangeText={(e) => {\r\n                                    setOldPassword(e)\r\n                                }}\r\n                            />\r\n                            <TouchableOpacity\r\n                                style={styles.update}\r\n                                onPress={edit}\r\n                            >\r\n                                <Text style={{ fontSize: 15, fontWeight: 'bold' }}>Confirm</Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </Modal>\r\n                </View>\r\n            </ImageBackground>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    update:\r\n    {\r\n        backgroundColor: 'cyan',\r\n        textAlign: 'center',\r\n        borderRadius: 10,\r\n        marginTop: 20,\r\n        padding: 15,\r\n        width: '60%',\r\n        alignItems: 'center'\r\n    },\r\n    textForm:\r\n    {\r\n        borderWidth: 1,\r\n        padding: 10,\r\n        borderColor: 'gray',\r\n        borderRadius: 10,\r\n        marginTop: 10,\r\n        color: 'black',\r\n        fontSize: 20,\r\n        backgroundColor: 'white',\r\n        width: '60%',\r\n        textAlign: 'center'\r\n    }\r\n    ,\r\n    textName:\r\n    {\r\n        fontSize: 20,\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    }\r\n    ,\r\n    image:\r\n    {\r\n        width: 100,\r\n        height: 100,\r\n        backgroundColor: 'pink',\r\n        borderRadius: 50,\r\n    }\r\n    ,\r\n    modal:\r\n    {\r\n        height: 200,\r\n        width: '80%',\r\n        backgroundColor: 'lightgreen',\r\n        borderRadius: 15,\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}